{"version":3,"sources":["logic.js","index.js"],"names":["verticalCheck","status","currentTurn","connected","j","i","length","console","log","horizontalCheck","diagonalCheck","x","module","exports","winCheck","win1","win2","win3","logic","require","Header","style","color","React","Component","Square","props","className","onClick","backgroundColor","value","Board","state","squares","Array","fill","redIsNext","this","setState","max","slice","Math","floor","random","getRandomInt","done","handleClick","resetBoard","resetPrompt","gameover","full","fullBoard","winner","blueTakeDefensiveTurn","renderSquare","renderReset","Instructions","Credits","Game","ReactDOM","render","document","getElementById","createElement"],"mappings":"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","file":"static/js/main.75123f57.chunk.js","sourcesContent":["//const board = require('./board.js')\n\n\n//Vertical Win Logic\nfunction verticalCheck(status, currentTurn)\n{\n    var connected = 0;\n    for (var j = 0; j < 7; j++)\n    {\n        for (var i = j; i < status.length; i += 7)\n        {\n            if (status[i] == currentTurn)\n            {\n                connected += 1;\n                if (connected >= 4) {\n                    console.log(\"Vertical Check Win\");\n                    return true;\n                }\n            } \n            else\n            {\n                connected = 0;\n            }\n        }\n        connected = 0;\n    }\n    return false;\n}\n\n//Horizontal Win Logic\nfunction horizontalCheck(status, currentTurn)\n{\n    var connected = 0;\n    for (var i = 0; i < status.length; i++)\n    {\n        if (i % 7 == 0) connected = 0;\n        if (status[i] == currentTurn)\n        {\n            connected += 1;\n            if (connected >= 4) {\n                console.log(\"Horizontal Check win\");\n                return true;\n            }\n        }\n        else connected = 0;\n    }\n    return false;\n}\n\n\n//Diagonal Win Logic\nfunction diagonalCheck(status, currentTurn)\n{\n    var connected = 0;\n    for (var i = 0; i < status.length / 2; i++)\n    {\n        if (status[i] == currentTurn) \n        {\n            connected = 1;\n            if ((i % 7) <= 3)\n            {\n                var j = i;\n                while (connected > 0)\n                {\n                    if(status[j+8] == currentTurn)\n                    {\n                        connected++;\n                        if (connected >= 4) {\n                            console.log(\"Diagonal Check Win\");\n                            return true;\n                        }\n                        j += 8;\n                    }\n                    else connected = 0;\n                }\n            }\n            connected = 1;\n            if ((i % 7) >= 3)\n            {\n                var x = i;\n                while (connected > 0)\n                {\n                    if(status[x+6] == currentTurn)\n                    {\n                        connected++;\n                        if (connected >= 4) {\n                            console.log(\"Diagonal Check Win\");\n                            return true;\n                        }\n                        x += 6;\n                    }\n                    else connected = 0;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n//All three checks combined into one call\nfunction winCheck(status, currentTurn)\n{\n    var win1 = verticalCheck(status, currentTurn);\n    var win2 = horizontalCheck(status, currentTurn);\n    var win3 = diagonalCheck(status, currentTurn);\n    //console.log(\"vertical check: \" + win1 + \"\\nhorizontal check: \" + win2 + \"\\ndiagonal check: \" + win3);\n    if ((win1 == true) || (win2 == true) || (win3 == true))\n    {\n        console.log(\"Win condition met\");\n        return currentTurn;\n    }\n    else return null;   \n}\n\n\n\n\n\n\nmodule.exports = {winCheck, verticalCheck, horizontalCheck, diagonalCheck};","import React, { useEffect } from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst fs = require('fs');\nconst logic = require('./logic.js')\n//<button className=\"square\"  style={{ backgroundColor: this.state.boxColor }} onClick={() => this.setState({boxColor: \"blue\"})}></button>\n           // {this.state.value}\n  class Header extends React.Component {\n    render() {\n      return (\n        <div>\n        <h1 style={{color: \"blue\"}}>Connect Four!</h1>\n        </div>\n      );\n    }\n  }\n\n  function Square(props) {\n    return (\n      <button className=\"square\" onClick={props.onClick} style={{backgroundColor: props.value}}>\n      </button>\n    )\n  }\n\n  class Board extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        squares: Array(42).fill(null),\n        redIsNext: true,\n      };\n    }\n    resetBoard(){\n      this.setState({\n        squares: Array(42).fill(null),\n        redIsNext: true,\n      })\n    }\n    getRandomInt(max) {\n      if (logic.winCheck(this.state.squares, this.state.redIsNext ? \"blue\" : \"red\")) {\n        return;\n      }\n      let squares = this.state.squares.slice();\n      let i = Math.floor(Math.random() * max);\n      if (squares[i] === null) {\n        return i;        \n      } else {\n        console.log(\"Random Int Reroll\");\n        return this.getRandomInt(42);\n      }\n    }\n    blueTakeRandomTurn() {\n      let i = this.getRandomInt(42);\n      console.log(i);\n      let squares = this.state.squares.slice();\n      if (logic.winCheck(this.state.squares, this.state.redIsNext ? \"blue\" : \"red\")) {\n        return;\n      }\n      squares[i] = \"blue\";\n      console.log(this.state.squares)\n      this.setState({\n        squares: squares,\n        redIsNext: true,\n      })\n    }\n    redTakeRandomTurn() {\n      let i = this.getRandomInt(42);\n      console.log(i);\n      let squares = this.state.squares.slice();\n      if (logic.winCheck(this.state.squares, this.state.redIsNext ? \"blue\" : \"red\")) {\n        return;\n      }\n      squares[i] = \"red\";\n      console.log(this.state.squares)\n      this.setState({\n        squares: squares,\n        redIsNext: false,\n      })\n    }\n\n    blueTakeDefensiveTurn() {\n      let i;\n      let squares = this.state.squares.slice();\n      if (logic.winCheck(this.state.squares, this.state.redIsNext ? \"blue\" : \"red\")) {\n        return;\n      }\n      let connected = 0;\n      for (i = 0; i < 42; i++){\n        if (squares[i] === \"red\") {\n          connected++;\n        } else {\n          connected = 0;\n        }\n        if ((connected >= 2) && ((squares[i+1] != \"blue\") || (squares[i-connected] != \"blue\"))) break;\n      }\n      if (connected >=2)\n      { \n        if (squares[i+1] === null) \n        {\n          console.log(\"Front Horizontal Defense\");\n          squares[i+1] = \"blue\";\n        } else if (squares[i-connected] === null)\n        {\n          console.log(\"Back Horizontal Defense\");\n          squares[i-connected] = \"blue\";\n        } else \n        {\n          i = this.getRandomInt(42);\n          console.log(\"Random Pick Inside of Horizontal Connected\");\n          squares[i] = \"blue\";\n        }\n      } else {\n          let done = false;\n          connected = 0;\n          for (var j = 0; j < 7; j++)\n          {\n              for (i = j; i < 42; i += 7)\n              {\n                  if (squares[i] === \"red\")\n                  {\n                      connected += 1;\n                      console.log(\"Vertical Connected: \" + connected);\n                      if ((connected >= 2) && ((squares[i+7] != \"blue\") || (squares[i-(connected*7)] != \"blue\"))) {\n                        console.log(\"vertical break\");\n                        done = true;\n                        break;\n                      }\n                  } \n                  else\n                  {\n                    connected = 0;\n                  }\n              }\n              if (done) break;\n              connected = 0;\n          }\n          if (connected >= 2) \n          {\n            if (i <= 34 && squares[i+7] === null)\n            {\n              console.log(\"Bottom Vertical Defense\");\n              squares[i+7] = \"blue\";\n            }\n            else if (squares[i-(connected*7)] === null)\n            {\n              console.log(\"Top Vertical Defense\");\n              squares[i-(connected*7)] = \"blue\";\n            } else \n            {\n              i = this.getRandomInt(42);\n              console.log(\"Random Pick Inside of Vertical Connected\");\n              squares[i] = \"blue\";\n            }\n          } else {\n            i = this.getRandomInt(42);\n            console.log(\"Random Pick Outside of Connected\");\n            squares[i] = \"blue\";\n          }\n        }\n      console.log(this.state.squares)\n      this.setState({\n        squares: squares,\n        redIsNext: true,\n      })\n    }\n\n    handleClick(i) {\n      const squares = this.state.squares.slice();\n      if (logic.winCheck(this.state.squares, this.state.redIsNext ? \"blue\" : \"red\") || squares[i]) {\n        return;\n      }\n      squares[i] = this.state.redIsNext ? \"red\" : \"blue\";\n      this.setState({\n        squares: squares,\n        redIsNext: !this.state.redIsNext,\n      })\n    }\n\n\n\n    renderSquare(i) {\n      return (<Square\n                value={this.state.squares[i]}\n                onClick={() => this.handleClick(i)}\n              />\n      );\n    }\n    renderReset(i) {\n      if (i) \n      return (<Square\n                value={\"green\"}\n                onClick={() => this.resetBoard()}  \n              />      \n        );\n    }\n\n    fullBoard() {\n      for (let i = 0; i < 42; i++)\n      {\n        if (this.state.squares[i] === null){\n          return false;\n        };\n      }\n      return true;\n    }\n\n    render() {\n      let gameover = false;\n      let full = this.fullBoard();\n      let currentTurn = this.state.redIsNext ? \"blue\" : \"red\";\n      const winner = logic.winCheck(this.state.squares, currentTurn);\n\n      let status;\n      let resetPrompt;\n      if (winner != null) {\n        resetPrompt = \"Click to Reset\";\n        gameover = true;\n        status = \"Winner: \" + winner;\n      } else {\n        resetPrompt = \"\";\n        status = 'Next player: ' + (this.state.redIsNext ? \"Red\" : \"Blue\");\n      }\n      if (full){\n        status = \"Tie Game...\";\n      }\n      if (currentTurn == \"red\"){\n        //this.blueTakeRandomTurn();\n        this.blueTakeDefensiveTurn(); \n      }\n      //if (currentTurn == \"blue\") this.redTakeRandomTurn();\n      return (\n        <div>\n          <div className=\"status\">{status}</div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n            {this.renderSquare(6)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n            {this.renderSquare(9)}\n            {this.renderSquare(10)}\n            {this.renderSquare(11)}\n            {this.renderSquare(12)}\n            {this.renderSquare(13)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(14)}\n            {this.renderSquare(15)}\n            {this.renderSquare(16)}\n            {this.renderSquare(17)}\n            {this.renderSquare(18)}\n            {this.renderSquare(19)}\n            {this.renderSquare(20)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(21)}\n            {this.renderSquare(22)}\n            {this.renderSquare(23)}\n            {this.renderSquare(24)}\n            {this.renderSquare(25)}\n            {this.renderSquare(26)}\n            {this.renderSquare(27)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(28)}\n            {this.renderSquare(29)}\n            {this.renderSquare(30)}\n            {this.renderSquare(31)}\n            {this.renderSquare(32)}\n            {this.renderSquare(33)}\n            {this.renderSquare(34)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(35)}\n            {this.renderSquare(36)}\n            {this.renderSquare(37)}\n            {this.renderSquare(38)}\n            {this.renderSquare(39)}\n            {this.renderSquare(40)}\n            {this.renderSquare(41)}\n          </div>\n          <div className=\"reset\">{resetPrompt}</div>\n          <div className=\"resetSquare\">\n            {this.renderReset(gameover)}\n          </div>\n        </div>\n      );\n    } \n  }\n\n  class Instructions extends React.Component {\n    render() {\n      return (\n        <div>\n        <h2 style={{color: \"red\"}}>Rules</h2>\n        <p>- Red plays first, picking a square to change to their color </p>\n        <p>- They click on any unplayed square to claim it on their turn</p>\n        <p>- Once red plays, blue goes in the same manner</p>\n        <p>- Play continues until one side gets four in a row</p>\n        <p>- In the case of the board filling up, neither player wins</p> \n        </div>\n      );\n    }\n  }\n\n  class Credits extends React.Component {\n    render() {\n      return (\n        <div>\n          <h3>Made by David Sanders for CSCI 310: JavaScript</h3>\n          <p>v 0.1.9</p>\n        </div>\n      )\n    }\n  }\n  \n  \n  class Game extends React.Component {\n    render() {\n      return (\n      <div className=\"page\">\n        <div className=\"header\">\n          <Header />\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board />\n          </div>\n          <div className=\"game-info\">\n            <div>\n              <Instructions />\n            </div>\n          </div>\n        </div>\n        <Credits/>\n        </div>\n      </div>\n      );\n    }\n  }\n  \n\n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root') || document.createElement('div')\n  );\n  "],"sourceRoot":""}