{"version":3,"sources":["logic.js","index.js"],"names":["verticalCheck","status","currentTurn","connected","j","i","length","horizontalCheck","diagonalCheck","x","module","exports","winCheck","win1","win2","win3","console","log","logic","require","Header","style","color","React","Component","Square","props","className","onClick","backgroundColor","value","Board","state","squares","Array","fill","filled","redIsNext","this","setState","max","Math","floor","random","contains","push","getRandomInt","slice","handleClick","resetBoard","resetPrompt","gameover","full","winner","blueTakeTurn","renderSquare","renderReset","Instructions","Credits","Game","ReactDOM","render","document","getElementById","createElement"],"mappings":"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","file":"static/js/main.4c05e314.chunk.js","sourcesContent":["//const board = require('./board.js')\n\n\n//Vertical Win Logic\nfunction verticalCheck(status, currentTurn)\n{\n    var connected = 0;\n    for (var j = 0; j < 7; j++)\n    {\n        for (var i = j; i < status.length; i += 7)\n        {\n            if (status[i] == currentTurn)\n            {\n                connected += 1;\n                if (connected >= 4) return true;\n            } \n            else\n            {\n                connected = 0;\n            }\n        }\n    }\n    return false;\n}\n\n//Horizontal Win Logic\nfunction horizontalCheck(status, currentTurn)\n{\n    var connected = 0;\n    for (var i = 0; i < status.length; i++)\n    {\n        if (i % 7 == 0) connected = 0;\n        if (status[i] == currentTurn)\n        {\n            connected += 1;\n            if (connected >= 4) return true;\n        }\n        else connected = 0;\n    }\n    return false;\n}\n\n\n//Diagonal Win Logic\nfunction diagonalCheck(status, currentTurn)\n{\n    var connected = 0;\n    for (var i = 0; i < status.length / 2; i++)\n    {\n        if (status[i] == currentTurn) \n        {\n            connected = 1;\n            if ((i % 7) <= 3)\n            {\n                var j = i;\n                while (connected > 0)\n                {\n                    if(status[j+8] == currentTurn)\n                    {\n                        connected++;\n                        if (connected >= 4) return true;\n                        j += 8;\n                    }\n                    else connected = 0;\n                }\n            }\n            connected = 1;\n            if ((i % 7) >= 3)\n            {\n                var x = i;\n                while (connected > 0)\n                {\n                    if(status[x+6] == currentTurn)\n                    {\n                        connected++;\n                        if (connected >= 4) return true;\n                        x += 6;\n                    }\n                    else connected = 0;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n//All three checks combined into one call\nfunction winCheck(status, currentTurn)\n{\n    var win1 = verticalCheck(status, currentTurn);\n    var win2 = horizontalCheck(status, currentTurn);\n    var win3 = diagonalCheck(status, currentTurn);\n    //console.log(\"vertical check: \" + win1 + \"\\nhorizontal check: \" + win2 + \"\\ndiagonal check: \" + win3);\n    if ((win1 == true) || (win2 == true) || (win3 == true))\n    {\n        console.log(\"Win condition met\");\n        return currentTurn;\n    }\n    else return null;   \n}\n\n\n\n\n\n\nmodule.exports = {winCheck, verticalCheck, horizontalCheck, diagonalCheck};","import React, { useEffect } from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nconst logic = require('./logic.js')\n//<button className=\"square\"  style={{ backgroundColor: this.state.boxColor }} onClick={() => this.setState({boxColor: \"blue\"})}></button>\n           // {this.state.value}\n  class Header extends React.Component {\n    render() {\n      return (\n        <div>\n        <h1 style={{color: \"blue\"}}>Connect Four!</h1>\n        </div>\n      );\n    }\n  }\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick} style={{backgroundColor: props.value}}>\n    </button>\n  )\n}\n  class Board extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        squares: Array(42).fill(null),\n        filled: Array(42).fill(null),\n        redIsNext: true,\n      };\n    }\n    resetBoard(){\n      this.setState({\n        squares: Array(42).fill(null),\n        filled: Array(42).fill(null),\n        redIsNext: true,\n      })\n    }\n    getRandomInt(max) {\n      let i = Math.floor(Math.random() * max);\n      if (this.state.filled.contains(i)) {\n        this.getRandomInt(42);\n      } else {\n        this.state.filled.push(i);\n        return i;\n      }\n    }\n    blueTakeTurn() {\n      let i = this.getRandomInt(42);\n      const squares = this.state.squares.slice();\n      if (logic.winCheck(this.state.squares, this.state.redIsNext ? \"blue\" : \"red\")) {\n        return;\n      }\n      squares[i] = this.state.redIsNext ? \"red\" : \"blue\";\n      this.setState({\n        squares: squares,\n        redIsNext: !this.state.redIsNext,\n        //filled: Array(i).fill(true), \n      })\n    }\n\n    handleClick(i) {\n      const squares = this.state.squares.slice();\n      if (logic.winCheck(this.state.squares, this.state.redIsNext ? \"blue\" : \"red\") || squares[i]) {\n        return;\n      }\n      squares[i] = this.state.redIsNext ? \"red\" : \"blue\";\n      this.state.filled.push(i);\n      this.setState({\n        squares: squares,\n        redIsNext: !this.state.redIsNext,\n        //filled: Array[i] = true, \n      })\n    }\n\n\n\n    renderSquare(i) {\n      return (<Square\n                value={this.state.squares[i]}\n                onClick={() => this.handleClick(i)}\n              />\n      );\n    }\n    renderReset(i) {\n      if (i) \n      return (<Square\n                value={\"green\"}\n                onClick={() => this.resetBoard()}  \n              />      \n        );\n      }\n\n\n    render() {\n      let gameover = false;\n      let full = false;\n      let currentTurn = this.state.redIsNext ? \"blue\" : \"red\";\n      const winner = logic.winCheck(this.state.squares, currentTurn);\n      for (let i = 0; i < 42; i++)\n      {\n        if (this.state.filled.length > 84){\n          full = true;\n        };\n      }\n      let status;\n      let resetPrompt;\n      if (winner != null) {\n        resetPrompt = \"Click to Reset\";\n        gameover = true;\n        status = \"Winner: \" + winner;\n      } else {\n        resetPrompt = \"\";\n        status = 'Next player: ' + (this.state.redIsNext ? \"Red\" : \"Blue\");\n      }\n      if (full === true){\n        status = \"Tie Game...\";\n      }\n      if (currentTurn == \"red\"){\n        this.blueTakeTurn(); \n      }\n      return (\n        <div>\n          <div className=\"status\">{status}</div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n            {this.renderSquare(6)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n            {this.renderSquare(9)}\n            {this.renderSquare(10)}\n            {this.renderSquare(11)}\n            {this.renderSquare(12)}\n            {this.renderSquare(13)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(14)}\n            {this.renderSquare(15)}\n            {this.renderSquare(16)}\n            {this.renderSquare(17)}\n            {this.renderSquare(18)}\n            {this.renderSquare(19)}\n            {this.renderSquare(20)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(21)}\n            {this.renderSquare(22)}\n            {this.renderSquare(23)}\n            {this.renderSquare(24)}\n            {this.renderSquare(25)}\n            {this.renderSquare(26)}\n            {this.renderSquare(27)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(28)}\n            {this.renderSquare(29)}\n            {this.renderSquare(30)}\n            {this.renderSquare(31)}\n            {this.renderSquare(32)}\n            {this.renderSquare(33)}\n            {this.renderSquare(34)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(35)}\n            {this.renderSquare(36)}\n            {this.renderSquare(37)}\n            {this.renderSquare(38)}\n            {this.renderSquare(39)}\n            {this.renderSquare(40)}\n            {this.renderSquare(41)}\n          </div>\n          <div className=\"reset\">{resetPrompt}</div>\n          <div className=\"resetSquare\">\n            {this.renderReset(gameover)}\n          </div>\n        </div>\n      );\n    } \n  }\n\n  class Instructions extends React.Component {\n    render() {\n      return (\n        <div>\n        <h2 style={{color: \"red\"}}>Rules</h2>\n        <p>- Red plays first, picking a square to change to their color </p>\n        <p>- They click on any unplayed square to claim it on their turn</p>\n        <p>- Once red plays, blue goes in the same manner</p>\n        <p>- Play continues until one side gets four in a row</p>\n        <p>- In the case of the board filling up, neither player wins</p> \n        </div>\n      );\n    }\n  }\n\n  class Credits extends React.Component {\n    render() {\n      return (\n        <div>\n          <h3>Made by David Sanders for CSCI 310: JavaScript</h3>\n          <p>v 0.1.7.9</p>\n        </div>\n      )\n    }\n  }\n  \n  \n  class Game extends React.Component {\n    render() {\n      return (\n      <div className=\"page\">\n        <div className=\"header\">\n          <Header />\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board />\n          </div>\n          <div className=\"game-info\">\n            <div>\n              <Instructions />\n            </div>\n          </div>\n        </div>\n        <Credits/>\n        </div>\n      </div>\n      );\n    }\n  }\n  \n\n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root') || document.createElement('div')\n  );\n  "],"sourceRoot":""}